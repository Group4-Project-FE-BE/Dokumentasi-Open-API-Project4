openapi: 3.0.3
info:
  title: Sosmed Kucing
  version: 1.0.0
  description: |
    Lorem ipsum, or lipsum as it is sometimes known, is dummy text used in laying out print, graphic or web designs. The passage is attributed to an unknown typesetter in the 15th century who is thought to have scrambled parts of Cicero's De Finibus Bonorum et Malorum for use in a type specimen book. It usually begins with:


servers:
  - url: 'localhost:8000'
    description: url belum fix

tags:
  - name: User #login, register, lihat profile user, update profile user, delelte profile (non aktif dgn delete gorm)
    description: API mengelola fitur User  
  - name: Posting  # add, get all, get by id, update, delete
    description: API mengelola fitur Postingan
  - name: Comment # add, get all comment by posting id, update by id comment, delete
    description: API mengelola fitur komentar

paths:
  /login:
    post:
      summary: "Login User"
      tags:
      - "User"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              properties:
                "email":
                  type: string
                "password":
                  type: string
            example:
              email: "cecep@gmail.com"
              password: "123"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/SuccesLoginResult"
              example:
                message: "Login Success"
                data:
                  id: 1
                  email: "cecep@gmail.com"
                  password: "123"
                  name: "cecep"
                  phone: "089234324"
                  bio: "cat lovers"
                  is_active: true
                token: "bC5jb20ifQ.TKw15NmLbSdIRwXWiu6UiMIudaCe5ecqyANNvA7YL"
        "400" :
          $ref : "#/components/responses/400"  
        '500':
          $ref: "#/components/responses/500"

  /register :
    post:
      security:
        - bearerAuth: []
      summary: "Insert Data User"
      tags:
      - "User"
      requestBody:
        required: true
        content:
          "application/json":
             schema:
                type: object
                $ref: "#/components/schemas/InsertUserObject"
             example:
              email: "cecep@gmail.com"
              password: "123"
              name: "cecep"
      responses:
        "201":
          description: "succes create data"
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/SuccesResult"
              example:
                message: "User successfully created"
                data:
                  id: 1
                  email: "cecep@gmail.com"
                  password: "123"
                  name: "cecep"
                  phone: "089234324"
                  bio: "serbian cat lovers"
                  is_active: true
        "400" :
          $ref : "#/components/responses/400"
        "401" :
          $ref : "#/components/responses/401"
        '500':
          $ref: "#/components/responses/500"
  /user:
    get:
      security:
        - bearerAuth: []    
      summary: "User Data"
      tags:
      - "User"
      parameters:
        - name: id_User
          in: query
          description: "get user"
          required: false
          schema:
           type: object
          example:
            id: "1"
      responses:
        "200":
          description: "Success Get Data"
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/SuccesResult"
              example:
                message: "User successfully created"
                data:
                  id: 1
                  email: "cecep@gmail.com"
                  password: "123"
                  name: "cecep"
                  phone: "089234324"
                  bio: "serbian cat lovers"
                  is_active: true            
        "400" :
          $ref : "#/components/responses/400"
        "401" :
          $ref : "#/components/responses/401"
        "500" :
          $ref : "#/components/responses/500"
    
    put: 
      security:
        - bearerAuth: []
      summary: "Update Data user"
      tags:
        - "User"
      requestBody:
        description: "Update user data"
        required: true
        content:
          "application/json":
            schema:
              type: object
              $ref: "#/components/schemas/editUserObject"
            example:
              data:
                email: "cecep@gmail.com"
                password: "123"
                name: "boris"
                phone: "089234324"
                gender : men
                location : java
                bio: "cat lovers"
                is_active: true
      responses:
        '200':
          description: "success update data"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/SuccesResult"
              example:
                message: "success update data"
                data:
                  id: 1
                  email: "cecep@gmail.com"
                  password: "123"
                  name: "boris"
                  phone: "089234324"
                  bio: "cat lovers"
                  is_active: true
        "400" :
          $ref : "#/components/responses/400"
        "401" :
          $ref : "#/components/responses/401"           
        '500':
          $ref: "#/components/responses/500"
    delete:
      security:
        - bearerAuth: []
      summary: "Delete User Data"
      tags:
        - "User"
      parameters :
        - name : id_user
          in: header
          description: "delete by id user"
          required: false
          schema :
            type: object
          example:
            id_user: 1
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/SuccesResult"
              example:
                message: "Delete Success"
                data:
                  id: 1
                  email: "cecep@gmail.com"
                  password: "123"
                  name: "cecep"
                  phone: "089234324"
                  bio: "cat lovers"
                  is_active: true
        "400" :
          $ref : "#/components/responses/400"
        "401" :
          $ref : "#/components/responses/401"   
        '500':
          $ref: "#/components/responses/500"

  /postings :
    post :
      security:
        - bearerAuth: []
      summary: "Insert posting"
      tags:
        - "Posting"
      requestBody :
        required: true
        content :
          multipart/from-data :
            schema :
              type: object
              $ref : "#/components/schemas/editPostingObject"

      responses:
        "200" :
          description: "success posting"
          content:
            multipart/from-data :
              schema :
                type: object
                $ref : "#/components/schemas/PostingObject"
              example :
                id: 1
                "image":
                  imageId: 002
                  fileName: cat.png
                  imageUrl: www.cat.com
                content: new my cat
                id_user: 5



        "400" :
          $ref : "#/components/responses/400"
        "401" :
          $ref : "#/components/responses/401"
        "500" :
          $ref : "#/components/responses/500"

    get :
      summary: "show all posting"
      tags:
        - "Posting"
      parameters:
        - name : id_posting
          in: query
          description: "filter get by id posting"
          required: false
          schema :
            type: object
          examples:
            1 :
              description: "example posting id 1 "
              value : 1
            2:
              description: "example posting id 2"
              value : 2
            3 :
              description: "example posting id 3"
              value: 3
        - name : id_user
          in : query
          schema :
            type: object
          examples:
            1 :
              description: "example user id 1 "
              value : 1
            2:
              description: "example user id 2"
              value : 2
            3 :
              description: "example user id 3"
              value: 3
      responses :
        "200" :
          description: "sucses show all posting"
          content:
            multipart/from-data :
              schema :
                type: object
                $ref : "#/components/schemas/ArrayPostingObj"
              example :
                message: "sucses get posting"
                data :
                - id: 1
                  "image":
                    imageId: 002
                    fileName: cat.png
                    imageUrl: www.cat.com
                  content: new my cat
                  id_user: 5
                - id: 2
                  "image": null
                  content: today with my cat
                  id_user: 5

        "400" :
          $ref : "#/components/responses/400"
        "401" :
          $ref : "#/components/responses/401"
        "500" :
          $ref : "#/components/responses/500"
          
  
    put :
      security:
        - bearerAuth: []
      summary: "update posting by id posting"
      tags:
        - "Posting"
      parameters :
        - name : id_posting
          in: header
          description: "update by id posting"
          required: false
          schema :
            type: object
          examples:
            1 :
              description: "example posting id 1 "
              value : 1
            2:
              description: "example posting id 2"
              value : 2
            3 :
              description: "example posting id 3"
              value: 3  
      requestBody :
        required: true
        content :
          multipart/from-data :
            schema :
              type: object
              $ref : "#/components/schemas/editPostingObject" 

      responses :
        "200" :
          description: "sucses update posting"
          content:
            multipart/from-data :
              schema :
                type: object
                $ref : "#/components/schemas/editPostingObject"
              example :
                message: "sucses edit posting"
                data :
                - "image":
                    imageId: 002
                    fileName: cat.png
                    imageUrl: www.cat.com
                  content: new my cat

        "500" :
          $ref : "#/components/responses/500" 


    delete :
      security:
        - bearerAuth: []
      summary: "delete posting by id posting"
      tags:
        - "Posting"
      parameters :
        - name : id_posting
          in: header
          description: "delete by id posting"
          required: false
          schema :
            type: object
          examples:
            1 :
              description: "example posting id 1 "
              value : 1
            2:
              description: "example posting id 2"
              value : 2
            3 :
              description: "example posting id 3"
              value: 3  
      responses :
        "200" :
          description: "sucses update posting"
          content:
            application/json :
              schema :
                type: object
                properties:
                  success:
                    type: boolean
              examples:
                success:
                  description: "sucsess delete posting"
                  value :
                    succses : true
        "500" :
          $ref : "#/components/responses/500"


  /comments:
      get:
        security:
          - bearerAuth: []
        summary: "Get All Comments Data by Posting Id"
        tags:
        - "Comment"
        parameters:
          - name: posting_id
            in: query
            description: "Posting id to filter comment only for this post"
            required: false 
            schema:
              type: object
            examples:
              1:
                description: "posting id = 1"
                value: 1
              43:
                description: "posting id = 43"
                value: 43
          - name: user_id
            in: query
            description: "User id to filter comment only get data of this user"
            required: false 
            schema:
              type: object
            examples:
              2:
                description: "user id = 2"
                value: 2
              4:
                description: "user id = 4"
                value: 4
        responses:
          "200":
            description: "Success Get Data"
            content:
              application/json:
                schema:
                  type: object
                  $ref: "#/components/schemas/SuccesArrayResult"
                example:
                  message: "Successfully get comments."
                  data:
                  - id: 1
                    content: |
                      It's your day, kitties! Go on, snooze, snack, and zoom-zoom! 😻 #caturday #cats #cat #love #nalacat #catfood 
                    id_user: 1
                    id_posting: 3
                  - id: 2
                    content: |
                      What are you going to be for Halloween ? 🎃 👻 #lovenalahalloween2022 #meow #cute #catsofinstagram 
                    id_user: 1
                    id_posting: 3
                  - id: 3
                    content: |
                      The original shark hat 😻 #shark 
                    id_user: 1
                    id_posting: 3
          '400':
            $ref: "#/components/responses/400"
          '401':
            $ref: "#/components/responses/401"
          '500':
            $ref: "#/components/responses/500"
      post:
        security:
          - bearerAuth: []
        summary: "Insert Comment Data" 
        tags:
          - "Comment"
        requestBody :
          required: true
          content:
            "application/json":
              schema:
                $ref : "#/components/schemas/InsertCommentObject"  
              example:
                content: |
                  It's your day, kitties! Go on, snooze, snack, and zoom-zoom! 😻 #caturday #cats #cat #love #nalacat #catfood 
                id_user: 1
                id_posting: 3
        responses:
          "201":
            description: "Success create data"
            content:
              application/json:
                schema:
                  type: object
                  $ref: "#/components/schemas/SuccesResult"
                example:
                  message: "Comment successfully created."
                  data:
                    id: 1
                    content: |
                      Can't wait to watch it 🔥🔥
                    id_user: 1
                    id_posting: 3
          '400':
            $ref: "#/components/responses/400"
          '401':
            $ref: "#/components/responses/401"
          '500':
            $ref: "#/components/responses/500"
      put:
        security:
          - bearerAuth: []
        summary: "Update Comment Data"
        tags:
          - "Comment"
        requestBody :
          required: true
          content:
            "application/json":
              schema:
                $ref : "#/components/schemas/CommentObject"  
              example:
                id: 1
                content: |
                  Can't wait to watch it 🔥🔥
                id_user: 1
                id_posting: 3              
        responses:
          "200":
            description: "Success Update data"
            content:
              application/json:
                schema:
                  type: object
                  $ref: "#/components/schemas/SuccesResult"
                example:
                  message: "Comment successfully updated."
                  data:
                    id: 1
                    content: |
                      Can't wait to watch it 🔥🔥
                    id_user: 1
                    id_posting: 3
          '400':
            $ref: "#/components/responses/400"
          '401':
            $ref: "#/components/responses/401"                    
          '500':
            $ref: "#/components/responses/500"    
      delete:
        security:
          - bearerAuth: []
        summary: "Delete Comment Data"
        tags:
        - "Comment"
        parameters:
          - name: comment_id
            in: query
            description: "Comment id to delete"
            required: false 
            schema:
              type: object
            examples:
              1:
                description: "comment id = 1"
                value: 1
              43:
                description: "comment id = 43"
                value: 43
        responses:
          "200":
            description: "Success Delete Data"
            content:
              application/json:
                schema:
                  type: object
                  $ref: "#/components/schemas/SuccesResult"
                example:
                  message: "Comment successfully updated."
                  data:
                    id: 1
                    content: |
                      Can't wait to watch it 🔥🔥
                    id_user: 1
                    id_posting: 3
          '400':
            $ref: "#/components/responses/400"
          '401':
            $ref: "#/components/responses/401"                    
          '500':
            $ref: "#/components/responses/500"

components:
  securitySchemes:
    "bearerAuth" :
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:

    "UserObject":
      type: object
      properties:
        "id":
          type: integer
        "email":
          type: string
        "password":
          type: string
        "name":
          type: string
        "phone":
          type: string
        "bio":
          type: string  
    
    "editUserObject":
      type: object
      properties:
        "email":
          type: string
        "password":
          type: string
        "name":
          type: string
        "phone":
          type: string
        "gender":
          type: string
        "location":
          type: string
        "bio":
          type: string 


    "PostingObject":
      type: object
      properties:
        "id":
          type: integer
        "image":
          properties:
            imageId:
              type: integer
            imageUrl:
              type: string
            fileName:
              type: string
              format: binary
        "content":
          type: string
        "id_user":
          type: integer

    "editPostingObject":
      type: object
      properties:
        "image":
          properties:
            imageId:
              type: integer
            imageUrl:
              type: string
            fileName:
              type: string
              format: binary
        "content":
          type: string


    "CommentObject":
      type: object
      properties:
        "id":
          type: integer
        "content":
          type: string
        "id_user":
          type: integer
        "id_posting":
          type: string
    "InsertCommentObject":
      type: object
      properties:
        "content":
          type: string
        "id_user":
          type: integer
        "id_posting":
          type: string

    "InsertUserObject":
      type: object
      properties:
        "email":
          type: string
        "password":
          type: string
        "name":
          type: string

    "ArrayPostingObj":
      type: array
      items :
        $ref: "#/components/schemas/PostingObject"
    "ArrCommentObject":
      type: array
      items:
        $ref: "#/components/schemas/CommentObject"      
    "SuccesResult":
      type: object
      properties:
        message: 
          type: string
        data:
          type: object
    "SuccesLoginResult":
      type: object
      properties:
        message: 
          type: string
        data:
          type: object
        token: 
          type: string
    "SuccesArrayResult":
      type: object
      properties:
        message: 
          type: string
        data:
          type: array
          items : 
            $ref: "#/components/schemas/SuccesResult"
  responses:
    '200':
      description: "Success Process Data"
      content:
        application/json:
          schema:
            type: object
            properties:
              message: 
                type: string
              data:
                type: object
    '201':
      description: "Success Create Data"
      content:
        application/json:
          schema:
            type: object
            properties:
              message: 
                type: string
              data:
                type: object
    '400':
      description: "Wrong Request From User"
      content:
        "application/json":
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Process Failed. Please check your input."
    '401':
      description: "Authorization information is missing or invalid."
      content:
        "application/json":
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Process Failed. User not authorized for this request."
    '500':
      description: "Error from server"
      content:
        "application/json":
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Process Failed. Please check server."


